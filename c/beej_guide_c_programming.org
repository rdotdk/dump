* Beej's Guide to C Programming
** 2.2 Hello World!
#+begin_src C 
/*Hello World Program*/ 

// anything between /* and */ is a comment and will be ignored by the compiler
// same goes for //

// #include tells the compiler to pull the contents from another file into this file

// anything that has # is something the preprocessor operates on before the compilation happens

// common preprocessor directives - #include and #define

// stdio.h is the header file. standard i/o. included here to access printf() function

#include <stdio.h>

// the definition of main function. Everything in between {} are part of this main function.
int main(void)
{
printf("Hello, World!\n");
}
#+end_src

compile hello.c and output executable as hello
#+begin_src bash
gcc -o hello hello.c
#+end_src

run the output file using
#+begin_src bash
./hello
#+end_src
./ tells the shell to run from the current directory

output
#+begin_src bash
Hello, World!
#+end_src

** 2.3 Compilation details
Compilation is the process of taking c source code and turning into a program that your operating system can execute.
While compiling c, machine code is generated. This is the 1s and 0s that can be directly executed in the CPU.
languages that aren't compiled are called interpreted languages.
c compiler does the compilation.
gcc is a compiler installed on many unix-like operating systems.

** 2.4 Building with gcc
#+begin_src bash
gcc -o hello hello.c
#+end_src
-o means output to this file
hello.c is the name of the file we want to compile

if the source is broken into multiple files you can compile by putting them all together 
#+begin_src bash
gcc -o awesomegame ui.c characters.c npc.c items.c
#+end_src
** 2.7 C Versions

|Version | Description|
|--------|-------------|
| K&R C  | 1978 Named after Brain Kernighan and Dennis Ritchie.|
| C89, ANSI C, C90| 1989 American National Standards Institute (ANSI C) - C language specification|
|C95| wide character support|
|C99| //-style comments|
|C11| unicode support and multi threading|
|C17, C18| Bugfix update to C11. C17 is the official name, but it was delayed until 2018|
|C2x| coming next. C21|

Force GCC to use one of these standards with -std= command line argument
#+begin_src bash
gcc -std=c11 -pedantic foo.c
#+end_src

Compile programs for C2x with all warnings set
#+begin_src bash
gcc -Wall -Wextra -std=c2x -pedantic foo.c
#+end_src

** 3.1 Variables
Variables hold values. Variable is a human readable name that refers to some data in memory.
You can think of memory as big array of bytes (byte is an 8-bit binary number, holds value from 0 to 255 inclusive).
Data is stored in this array. If a number is larger than a single byte, it is stored in multiple bytes. 
Because memory is like an array, each byte of memory can be referred to by its index. 
This index into memory is called an address, or a location or a pointer.

*** 3.1.1 Variable Names
Any characters in the range 0-9, A-Z, a-z and underscore for variable names.
You can't start a variable with a digit 0-9.
You can't start a variable name with two underscores.
You can't start a variable name with an underscore followed by A-Z.
*** 3.2.1 Variable Types
|Type|Example|C Type|
|--|--|--|
|Integer| 3490| int|
|Floating point| 3.14159| float|
|Character| 'c' | char|
|String| "Hello, World!"| char|

Before you can use a variable, you have to declar that variable and tell C what type the variable holds.
Once declared, the type of the variable cannot be changed later at runtime.
